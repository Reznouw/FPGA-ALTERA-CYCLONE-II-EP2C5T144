
pru1.elf:     file format elf32-littlenios2
pru1.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00002020

Program Header:
    LOAD off    0x00001000 vaddr 0x00002000 paddr 0x00002000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00002020 paddr 0x00002020 align 2**12
         filesz 0x000001d8 memsz 0x000001e8 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00002000  00002000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         000001cc  00002020  00002020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  000021ec  000021ec  000011ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000010  000021f8  000021f8  000011f8  2**2
                  ALLOC, SMALL_DATA
  4 .comment      00000026  00000000  00000000  000011f8  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00001220  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001b6  00000000  00000000  00001388  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000092a  00000000  00000000  0000153e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000509  00000000  00000000  00001e68  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000014f9  00000000  00000000  00002371  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000188  00000000  00000000  0000386c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000004cc  00000000  00000000  000039f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000011b  00000000  00000000  00003ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_alt_sim_info 00000010  00000000  00000000  00003fdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000020  00000000  00000000  00003ff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .thread_model 00000003  00000000  00000000  00004ce2  2**0
                  CONTENTS, READONLY
 16 .cpu          00000003  00000000  00000000  00004ce5  2**0
                  CONTENTS, READONLY
 17 .qsys         00000001  00000000  00000000  00004ce8  2**0
                  CONTENTS, READONLY
 18 .simulation_enabled 00000001  00000000  00000000  00004ce9  2**0
                  CONTENTS, READONLY
 19 .stderr_dev   00000004  00000000  00000000  00004cea  2**0
                  CONTENTS, READONLY
 20 .stdin_dev    00000004  00000000  00000000  00004cee  2**0
                  CONTENTS, READONLY
 21 .stdout_dev   00000004  00000000  00000000  00004cf2  2**0
                  CONTENTS, READONLY
 22 .sopc_system_name 00000004  00000000  00000000  00004cf6  2**0
                  CONTENTS, READONLY
 23 .quartus_project_dir 00000014  00000000  00000000  00004cfa  2**0
                  CONTENTS, READONLY
 24 .sopcinfo     0002a63a  00000000  00000000  00004d0e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00002000 l    d  .entry	00000000 .entry
00002020 l    d  .text	00000000 .text
000021ec l    d  .rodata	00000000 .rodata
000021f8 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00002058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00002074 l     F .text	00000020 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00002100 g     F .text	0000002c alt_main
000021f8 g       *ABS*	00000000 __flash_rwdata_start
0000212c g     F .text	00000038 alt_putstr
00002000 g     F .entry	0000000c __reset
00002020 g       *ABS*	00000000 __flash_exceptions_start
000021fc g     O .bss	00000004 alt_argv
0000a1f8 g       *ABS*	00000000 _gp
00002204 g     O .bss	00000004 jtag
00002208 g       *ABS*	00000000 __bss_end
000021bc g     F .text	00000004 alt_dcache_flush_all
000021f8 g       *ABS*	00000000 __ram_rwdata_end
000021f8 g       *ABS*	00000000 __ram_rodata_end
00002208 g       *ABS*	00000000 end
00003000 g       *ABS*	00000000 __alt_stack_pointer
00002188 g     F .text	00000034 altera_avalon_jtag_uart_write
00002020 g     F .text	0000003c _start
00002164 g     F .text	00000004 alt_sys_init
000021f8 g       *ABS*	00000000 __ram_rwdata_start
000021ec g       *ABS*	00000000 __ram_rodata_start
00002208 g       *ABS*	00000000 __alt_stack_base
00002000 g       *ABS*	00000000 __alt_mem_memoria
000021f8 g       *ABS*	00000000 __bss_start
0000205c g     F .text	00000018 main
00002200 g     O .bss	00000004 alt_envp
000021ec g       *ABS*	00000000 __flash_rodata_start
00002168 g     F .text	00000020 alt_irq_init
000021f8 g     O .bss	00000004 alt_argc
00002020 g       *ABS*	00000000 __ram_exceptions_start
000021f8 g       *ABS*	00000000 _edata
00002208 g       *ABS*	00000000 _end
00002020 g       *ABS*	00000000 __ram_exceptions_end
000021c4 g     F .text	00000008 altera_nios2_qsys_irq_init
0000200c g       .entry	00000000 exit
00003000 g       *ABS*	00000000 __alt_data_end
0000200c g       .entry	00000000 _exit
000021cc g     F .text	00000020 strlen
000021c0 g     F .text	00000004 alt_icache_flush_all
00002094 g     F .text	0000006c alt_load



Disassembly of section .entry:

00002000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    2000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    2004:	08480814 	ori	at,at,8224
    jmp r1
    2008:	0800683a 	jmp	at

0000200c <_exit>:
	...

Disassembly of section .text:

00002020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    2020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    2024:	decc0014 	ori	sp,sp,12288

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    2028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    202c:	d6a87e14 	ori	gp,gp,41464
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    2030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    2034:	10887e14 	ori	r2,r2,8696

    movhi r3, %hi(__bss_end)
    2038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    203c:	18c88214 	ori	r3,r3,8712

    beq r2, r3, 1f
    2040:	10c00326 	beq	r2,r3,2050 <_start+0x30>

0:
    stw zero, (r2)
    2044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    2048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    204c:	10fffd36 	bltu	r2,r3,2044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    2050:	00020940 	call	2094 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    2054:	00021000 	call	2100 <alt_main>

00002058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    2058:	003fff06 	br	2058 <alt_after_alt_main>

0000205c <main>:

#include "sys/alt_stdio.h"

int main()
{ 
    205c:	deffff04 	addi	sp,sp,-4
  alt_putstr("PRUEBA II!\n");
    2060:	01000034 	movhi	r4,0
    2064:	21087b04 	addi	r4,r4,8684

#include "sys/alt_stdio.h"

int main()
{ 
    2068:	dfc00015 	stw	ra,0(sp)
  alt_putstr("PRUEBA II!\n");
    206c:	000212c0 	call	212c <alt_putstr>
    2070:	003fff06 	br	2070 <main+0x14>

00002074 <alt_load_section>:

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    2074:	2900051e 	bne	r5,r4,208c <alt_load_section+0x18>
    2078:	f800283a 	ret
  {
    while( to != end )
    {
      *to++ = *from++;
    207c:	20800017 	ldw	r2,0(r4)
    2080:	21000104 	addi	r4,r4,4
    2084:	28800015 	stw	r2,0(r5)
    2088:	29400104 	addi	r5,r5,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    208c:	29bffb1e 	bne	r5,r6,207c <alt_load_section+0x8>
    2090:	f800283a 	ret

00002094 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    2094:	deffff04 	addi	sp,sp,-4
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    2098:	01000034 	movhi	r4,0
    209c:	21087e04 	addi	r4,r4,8696
    20a0:	01400034 	movhi	r5,0
    20a4:	29487e04 	addi	r5,r5,8696
    20a8:	01800034 	movhi	r6,0
    20ac:	31887e04 	addi	r6,r6,8696
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    20b0:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    20b4:	00020740 	call	2074 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    20b8:	01000034 	movhi	r4,0
    20bc:	21080804 	addi	r4,r4,8224
    20c0:	01400034 	movhi	r5,0
    20c4:	29480804 	addi	r5,r5,8224
    20c8:	01800034 	movhi	r6,0
    20cc:	31880804 	addi	r6,r6,8224
    20d0:	00020740 	call	2074 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    20d4:	01000034 	movhi	r4,0
    20d8:	21087b04 	addi	r4,r4,8684
    20dc:	01400034 	movhi	r5,0
    20e0:	29487b04 	addi	r5,r5,8684
    20e4:	01800034 	movhi	r6,0
    20e8:	31887e04 	addi	r6,r6,8696
    20ec:	00020740 	call	2074 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    20f0:	00021bc0 	call	21bc <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    20f4:	dfc00017 	ldw	ra,0(sp)
    20f8:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    20fc:	00021c01 	jmpi	21c0 <alt_icache_flush_all>

00002100 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    2100:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    2104:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    2108:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    210c:	00021680 	call	2168 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    2110:	00021640 	call	2164 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    2114:	d1200017 	ldw	r4,-32768(gp)
    2118:	d1600117 	ldw	r5,-32764(gp)
    211c:	d1a00217 	ldw	r6,-32760(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    2120:	dfc00017 	ldw	ra,0(sp)
    2124:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    2128:	000205c1 	jmpi	205c <main>

0000212c <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    212c:	defffe04 	addi	sp,sp,-8
    2130:	dc000015 	stw	r16,0(sp)
    2134:	dfc00115 	stw	ra,4(sp)
    2138:	2021883a 	mov	r16,r4
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    213c:	00021cc0 	call	21cc <strlen>
    2140:	800b883a 	mov	r5,r16
    2144:	100d883a 	mov	r6,r2
    2148:	01000034 	movhi	r4,0
    214c:	21088104 	addi	r4,r4,8708
    2150:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
}
    2154:	dfc00117 	ldw	ra,4(sp)
    2158:	dc000017 	ldw	r16,0(sp)
    215c:	dec00204 	addi	sp,sp,8
int 
alt_putstr(const char* str)
{
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    2160:	00021881 	jmpi	2188 <altera_avalon_jtag_uart_write>

00002164 <alt_sys_init>:
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, jtag);
}
    2164:	f800283a 	ret

00002168 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    2168:	deffff04 	addi	sp,sp,-4
    216c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
    2170:	00021c40 	call	21c4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    2174:	00800044 	movi	r2,1
    2178:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    217c:	dfc00017 	ldw	ra,0(sp)
    2180:	dec00104 	addi	sp,sp,4
    2184:	f800283a 	ret

00002188 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    2188:	21000017 	ldw	r4,0(r4)

  const char * end = ptr + count;
    218c:	298f883a 	add	r7,r5,r6
    2190:	20c00104 	addi	r3,r4,4
    2194:	00000606 	br	21b0 <altera_avalon_jtag_uart_write+0x28>

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    2198:	18800037 	ldwio	r2,0(r3)
    219c:	10bfffec 	andhi	r2,r2,65535
    21a0:	10000326 	beq	r2,zero,21b0 <altera_avalon_jtag_uart_write+0x28>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    21a4:	28800007 	ldb	r2,0(r5)
    21a8:	29400044 	addi	r5,r5,1
    21ac:	20800035 	stwio	r2,0(r4)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    21b0:	29fff936 	bltu	r5,r7,2198 <altera_avalon_jtag_uart_write+0x10>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
    21b4:	3005883a 	mov	r2,r6
    21b8:	f800283a 	ret

000021bc <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    21bc:	f800283a 	ret

000021c0 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    21c0:	f800283a 	ret

000021c4 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    21c4:	000170fa 	wrctl	ienable,zero
}
    21c8:	f800283a 	ret

000021cc <strlen>:
    21cc:	20800007 	ldb	r2,0(r4)
    21d0:	10000526 	beq	r2,zero,21e8 <strlen+0x1c>
    21d4:	2007883a 	mov	r3,r4
    21d8:	18c00044 	addi	r3,r3,1
    21dc:	18800007 	ldb	r2,0(r3)
    21e0:	103ffd1e 	bne	r2,zero,21d8 <strlen+0xc>
    21e4:	1905c83a 	sub	r2,r3,r4
    21e8:	f800283a 	ret
