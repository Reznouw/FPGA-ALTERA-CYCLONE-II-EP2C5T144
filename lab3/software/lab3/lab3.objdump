
lab3.elf:     file format elf32-littlenios2
lab3.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00002020

Program Header:
    LOAD off    0x00001000 vaddr 0x00002000 paddr 0x00002000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00002020 paddr 0x00002020 align 2**12
         filesz 0x000002d8 memsz 0x000002e8 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00002000  00002000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         000002d8  00002020  00002020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  000022f8  000022f8  000012f8  2**2
                  ALLOC, SMALL_DATA
  3 .comment      00000026  00000000  00000000  000012f8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000128  00000000  00000000  00001320  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000174  00000000  00000000  00001448  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000785  00000000  00000000  000015bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003f4  00000000  00000000  00001d41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010a2  00000000  00000000  00002135  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  000031d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044b  00000000  00000000  00003338  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000110  00000000  00000000  00003783  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_alt_sim_info 00000010  00000000  00000000  00003894  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000020  00000000  00000000  000038a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .thread_model 00000003  00000000  00000000  000044ee  2**0
                  CONTENTS, READONLY
 15 .cpu          00000003  00000000  00000000  000044f1  2**0
                  CONTENTS, READONLY
 16 .qsys         00000001  00000000  00000000  000044f4  2**0
                  CONTENTS, READONLY
 17 .simulation_enabled 00000001  00000000  00000000  000044f5  2**0
                  CONTENTS, READONLY
 18 .stderr_dev   0000000b  00000000  00000000  000044f6  2**0
                  CONTENTS, READONLY
 19 .stdin_dev    0000000b  00000000  00000000  00004501  2**0
                  CONTENTS, READONLY
 20 .stdout_dev   0000000b  00000000  00000000  0000450c  2**0
                  CONTENTS, READONLY
 21 .sopc_system_name 00000004  00000000  00000000  00004517  2**0
                  CONTENTS, READONLY
 22 .quartus_project_dir 00000014  00000000  00000000  0000451b  2**0
                  CONTENTS, READONLY
 23 .sopcinfo     00031075  00000000  00000000  0000452f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00002000 l    d  .entry	00000000 .entry
00002020 l    d  .text	00000000 .text
000022f8 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00002058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
0000220c l     F .text	00000020 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00002298 g     F .text	0000002c alt_main
000022f8 g       *ABS*	00000000 __flash_rwdata_start
00002000 g     F .entry	0000000c __reset
00002020 g       *ABS*	00000000 __flash_exceptions_start
000022fc g     O .bss	00000004 alt_argv
0000a2f8 g       *ABS*	00000000 _gp
00002000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00002308 g       *ABS*	00000000 __bss_end
000022e8 g     F .text	00000004 alt_dcache_flush_all
000022f8 g       *ABS*	00000000 __ram_rwdata_end
000022f8 g       *ABS*	00000000 __ram_rodata_end
00002304 g     O .bss	00000004 jtag_uart_0
00002308 g       *ABS*	00000000 end
00003000 g       *ABS*	00000000 __alt_stack_pointer
00002020 g     F .text	0000003c _start
000022c4 g     F .text	00000004 alt_sys_init
000021d4 g     F .text	00000038 __mulsi3
000022f8 g       *ABS*	00000000 __ram_rwdata_start
000022f8 g       *ABS*	00000000 __ram_rodata_start
00002308 g       *ABS*	00000000 __alt_stack_base
000022f8 g       *ABS*	00000000 __bss_start
00002098 g     F .text	0000013c main
00002300 g     O .bss	00000004 alt_envp
000022f8 g       *ABS*	00000000 __flash_rodata_start
0000205c g     F .text	0000003c delay
000022c8 g     F .text	00000020 alt_irq_init
000022f8 g     O .bss	00000004 alt_argc
00002020 g       *ABS*	00000000 __ram_exceptions_start
000022f8 g       *ABS*	00000000 _edata
00002308 g       *ABS*	00000000 _end
00002020 g       *ABS*	00000000 __ram_exceptions_end
000022f0 g     F .text	00000008 altera_nios2_qsys_irq_init
0000200c g       .entry	00000000 exit
00003000 g       *ABS*	00000000 __alt_data_end
0000200c g       .entry	00000000 _exit
000022ec g     F .text	00000004 alt_icache_flush_all
0000222c g     F .text	0000006c alt_load



Disassembly of section .entry:

00002000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    2000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    2004:	08480814 	ori	at,at,8224
    jmp r1
    2008:	0800683a 	jmp	at

0000200c <_exit>:
	...

Disassembly of section .text:

00002020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    2020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    2024:	decc0014 	ori	sp,sp,12288

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    2028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    202c:	d6a8be14 	ori	gp,gp,41720
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    2030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    2034:	1088be14 	ori	r2,r2,8952

    movhi r3, %hi(__bss_end)
    2038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    203c:	18c8c214 	ori	r3,r3,8968

    beq r2, r3, 1f
    2040:	10c00326 	beq	r2,r3,2050 <_start+0x30>

0:
    stw zero, (r2)
    2044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    2048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    204c:	10fffd36 	bltu	r2,r3,2044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    2050:	000222c0 	call	222c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    2054:	00022980 	call	2298 <alt_main>

00002058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    2058:	003fff06 	br	2058 <alt_after_alt_main>

0000205c <delay>:

#include "sys/alt_stdio.h"
#include "system.h"
#include "altera_avalon_pio_regs.h"

void delay(int a){
    205c:	defffe04 	addi	sp,sp,-8
	volatile int i = 0;
	while (i < a*10000){
    2060:	0149c404 	movi	r5,10000

#include "sys/alt_stdio.h"
#include "system.h"
#include "altera_avalon_pio_regs.h"

void delay(int a){
    2064:	dfc00115 	stw	ra,4(sp)
	volatile int i = 0;
    2068:	d8000015 	stw	zero,0(sp)
	while (i < a*10000){
    206c:	00021d40 	call	21d4 <__mulsi3>
    2070:	1007883a 	mov	r3,r2
    2074:	00000306 	br	2084 <delay+0x28>
			i++;
    2078:	d8800017 	ldw	r2,0(sp)
    207c:	10800044 	addi	r2,r2,1
    2080:	d8800015 	stw	r2,0(sp)
#include "system.h"
#include "altera_avalon_pio_regs.h"

void delay(int a){
	volatile int i = 0;
	while (i < a*10000){
    2084:	d8800017 	ldw	r2,0(sp)
    2088:	10fffb16 	blt	r2,r3,2078 <delay+0x1c>
			i++;
	}
}
    208c:	dfc00117 	ldw	ra,4(sp)
    2090:	dec00204 	addi	sp,sp,8
    2094:	f800283a 	ret

00002098 <main>:

int main()
{ 
    2098:	defffa04 	addi	sp,sp,-24
    209c:	dfc00515 	stw	ra,20(sp)
    20a0:	dd000415 	stw	r20,16(sp)
    20a4:	dcc00315 	stw	r19,12(sp)
    20a8:	dc800215 	stw	r18,8(sp)
    20ac:	dc400115 	stw	r17,4(sp)
    20b0:	dc000015 	stw	r16,0(sp)
  int var1;
  while (1){
	  var1 = IORD_ALTERA_AVALON_PIO_DATA(PIO_1_BASE);
    20b4:	00900004 	movi	r2,16384
    20b8:	15000037 	ldwio	r20,0(r2)

	  if(var1 == 0){
		  IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE,0);
    20bc:	04cc0004 	movi	r19,12288
{ 
  int var1;
  while (1){
	  var1 = IORD_ALTERA_AVALON_PIO_DATA(PIO_1_BASE);

	  if(var1 == 0){
    20c0:	a000171e 	bne	r20,zero,2120 <main+0x88>
		  IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE,0);
    20c4:	98000035 	stwio	zero,0(r19)
		  delay(20);
    20c8:	01000504 	movi	r4,20
    20cc:	000205c0 	call	205c <delay>

		  IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE,1);
    20d0:	04800044 	movi	r18,1
    20d4:	9c800035 	stwio	r18,0(r19)
		  delay(20);
    20d8:	01000504 	movi	r4,20
    20dc:	000205c0 	call	205c <delay>

		  IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE,2);
    20e0:	04400084 	movi	r17,2
    20e4:	9c400035 	stwio	r17,0(r19)
		  delay(20);
    20e8:	01000504 	movi	r4,20
    20ec:	000205c0 	call	205c <delay>

		  IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE,4);
    20f0:	04000104 	movi	r16,4
    20f4:	9c000035 	stwio	r16,0(r19)
		  delay(20);
    20f8:	01000504 	movi	r4,20
    20fc:	000205c0 	call	205c <delay>

		  IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE,1);
    2100:	9c800035 	stwio	r18,0(r19)
		  delay(20);
    2104:	01000504 	movi	r4,20
    2108:	000205c0 	call	205c <delay>

		  IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE,2);
    210c:	9c400035 	stwio	r17,0(r19)
		  delay(20);
    2110:	01000504 	movi	r4,20
    2114:	000205c0 	call	205c <delay>

		  IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE,4);
    2118:	9c000035 	stwio	r16,0(r19)
    211c:	00002a06 	br	21c8 <main+0x130>
		  delay(20);
	  }
	  else if(var1 == 1){
    2120:	00800044 	movi	r2,1
		  IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE,0);
    2124:	048c0004 	movi	r18,12288
		  delay(20);

		  IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE,4);
		  delay(20);
	  }
	  else if(var1 == 1){
    2128:	a080161e 	bne	r20,r2,2184 <main+0xec>
		  IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE,0);
    212c:	90000035 	stwio	zero,0(r18)
		  delay(20);
    2130:	01000504 	movi	r4,20
    2134:	000205c0 	call	205c <delay>

		  IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE,4);
    2138:	04400104 	movi	r17,4
    213c:	94400035 	stwio	r17,0(r18)
		  delay(20);
    2140:	01000504 	movi	r4,20
    2144:	000205c0 	call	205c <delay>

		  IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE,2);
    2148:	04000084 	movi	r16,2
    214c:	94000035 	stwio	r16,0(r18)
		  delay(20);
    2150:	01000504 	movi	r4,20
    2154:	000205c0 	call	205c <delay>

		  IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE,1);
    2158:	95000035 	stwio	r20,0(r18)
		  delay(20);
    215c:	01000504 	movi	r4,20
    2160:	000205c0 	call	205c <delay>

		  IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE,4);
    2164:	94400035 	stwio	r17,0(r18)
		  delay(20);
    2168:	01000504 	movi	r4,20
    216c:	000205c0 	call	205c <delay>

		  IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE,2);
    2170:	94000035 	stwio	r16,0(r18)
		  delay(20);
    2174:	01000504 	movi	r4,20
    2178:	000205c0 	call	205c <delay>

		  IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE,1);
    217c:	95000035 	stwio	r20,0(r18)
    2180:	00001106 	br	21c8 <main+0x130>
		  delay(20);
	  }
	  else{
		  IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE,0);
    2184:	90000035 	stwio	zero,0(r18)
		  delay(20);
    2188:	01000504 	movi	r4,20
    218c:	000205c0 	call	205c <delay>

		  IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE,7);
    2190:	040001c4 	movi	r16,7
    2194:	94000035 	stwio	r16,0(r18)
		  delay(20);
    2198:	01000504 	movi	r4,20
    219c:	000205c0 	call	205c <delay>

		  IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE,0);
    21a0:	90000035 	stwio	zero,0(r18)
		  delay(20);
    21a4:	01000504 	movi	r4,20
    21a8:	000205c0 	call	205c <delay>

		  IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE,7);
    21ac:	94000035 	stwio	r16,0(r18)
		  delay(20);
    21b0:	01000504 	movi	r4,20
    21b4:	000205c0 	call	205c <delay>

		  IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE,0);
    21b8:	90000035 	stwio	zero,0(r18)
		  delay(20);
    21bc:	01000504 	movi	r4,20
    21c0:	000205c0 	call	205c <delay>

		  IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE,7);
    21c4:	94000035 	stwio	r16,0(r18)
		  delay(20);
    21c8:	01000504 	movi	r4,20
    21cc:	000205c0 	call	205c <delay>
    21d0:	003fb806 	br	20b4 <main+0x1c>

000021d4 <__mulsi3>:
    21d4:	20000a26 	beq	r4,zero,2200 <__mulsi3+0x2c>
    21d8:	0007883a 	mov	r3,zero
    21dc:	2080004c 	andi	r2,r4,1
    21e0:	1005003a 	cmpeq	r2,r2,zero
    21e4:	2008d07a 	srli	r4,r4,1
    21e8:	1000011e 	bne	r2,zero,21f0 <__mulsi3+0x1c>
    21ec:	1947883a 	add	r3,r3,r5
    21f0:	294b883a 	add	r5,r5,r5
    21f4:	203ff91e 	bne	r4,zero,21dc <__mulsi3+0x8>
    21f8:	1805883a 	mov	r2,r3
    21fc:	f800283a 	ret
    2200:	0007883a 	mov	r3,zero
    2204:	1805883a 	mov	r2,r3
    2208:	f800283a 	ret

0000220c <alt_load_section>:

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    220c:	2900051e 	bne	r5,r4,2224 <alt_load_section+0x18>
    2210:	f800283a 	ret
  {
    while( to != end )
    {
      *to++ = *from++;
    2214:	20800017 	ldw	r2,0(r4)
    2218:	21000104 	addi	r4,r4,4
    221c:	28800015 	stw	r2,0(r5)
    2220:	29400104 	addi	r5,r5,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    2224:	29bffb1e 	bne	r5,r6,2214 <alt_load_section+0x8>
    2228:	f800283a 	ret

0000222c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    222c:	deffff04 	addi	sp,sp,-4
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    2230:	01000034 	movhi	r4,0
    2234:	2108be04 	addi	r4,r4,8952
    2238:	01400034 	movhi	r5,0
    223c:	2948be04 	addi	r5,r5,8952
    2240:	01800034 	movhi	r6,0
    2244:	3188be04 	addi	r6,r6,8952
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    2248:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    224c:	000220c0 	call	220c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    2250:	01000034 	movhi	r4,0
    2254:	21080804 	addi	r4,r4,8224
    2258:	01400034 	movhi	r5,0
    225c:	29480804 	addi	r5,r5,8224
    2260:	01800034 	movhi	r6,0
    2264:	31880804 	addi	r6,r6,8224
    2268:	000220c0 	call	220c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    226c:	01000034 	movhi	r4,0
    2270:	2108be04 	addi	r4,r4,8952
    2274:	01400034 	movhi	r5,0
    2278:	2948be04 	addi	r5,r5,8952
    227c:	01800034 	movhi	r6,0
    2280:	3188be04 	addi	r6,r6,8952
    2284:	000220c0 	call	220c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    2288:	00022e80 	call	22e8 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    228c:	dfc00017 	ldw	ra,0(sp)
    2290:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    2294:	00022ec1 	jmpi	22ec <alt_icache_flush_all>

00002298 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    2298:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    229c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    22a0:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    22a4:	00022c80 	call	22c8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    22a8:	00022c40 	call	22c4 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    22ac:	d1200017 	ldw	r4,-32768(gp)
    22b0:	d1600117 	ldw	r5,-32764(gp)
    22b4:	d1a00217 	ldw	r6,-32760(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    22b8:	dfc00017 	ldw	ra,0(sp)
    22bc:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    22c0:	00020981 	jmpi	2098 <main>

000022c4 <alt_sys_init>:
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
}
    22c4:	f800283a 	ret

000022c8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    22c8:	deffff04 	addi	sp,sp,-4
    22cc:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
    22d0:	00022f00 	call	22f0 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    22d4:	00800044 	movi	r2,1
    22d8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    22dc:	dfc00017 	ldw	ra,0(sp)
    22e0:	dec00104 	addi	sp,sp,4
    22e4:	f800283a 	ret

000022e8 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    22e8:	f800283a 	ret

000022ec <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    22ec:	f800283a 	ret

000022f0 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    22f0:	000170fa 	wrctl	ienable,zero
}
    22f4:	f800283a 	ret
